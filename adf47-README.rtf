{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Antonino Febbraro\
adf47@pitt.edu\
Project 1-Bugs\
\
	The algorithm that I used for this project is that the program constantly loops through the \'93poll\'94 function in which it checks for if buttons or keys have been pressed and if the two minuets is up for the program to stop. Also, as it is doing this, every 100ms the \'93animate\'94 function is called in which all the bugs, pulses, and waves are animated. Also, every 100ms the \'93collision\'94 function is called to check and see if a pulse hits a bug. Note, that in the animate function, it checks to see if a bug has gone over a pulse, if this happens it calls the \'93collided\'94 function because the collision function only checks for if a pulse goes over a bug. The \'93collided\'94 function simply makes a wave and adds it to the queue. This process is continued on for the duration of the game. \
	the collision algorithm works as followed. It runs through the queue (gameQue) and checks all green LEDs (bugs) and checks if the pulse queue has any pulses in the same x,y coordinate. If they do, then there is a collision and a wave is created. The animate function reads through the gameQue, finds out what type it is (red, green, or a wave) and then increments or decrements or moves left or right each LED depending on what each type is supposed to do. The make bugs function places bugs in random positions every 100ms. However, there is a random number sys call in there as well that determines if bugs should be placed. Meaning, a bug might not be placed every 100ms. This makes the game unpredictable and more challenging for the player. Also, the make bugs function sends a ton of bugs for the last 10 seconds of the game, just for fun. \
	The other functions, such as the insert_q, remove_q, and insertPulse functions work just as Dr. Childers had explained in the project sheet. They work like a stack, with the last in first out idea. The insert_q inserts an event and the remove_q removes the last event that was added to the queue. It is fairly simple. The remove_q function is called inside the animate function in order to pull each LED from the game queue and then the x and y positions are updated and then the insert_q function is called to update the game queue. The only time the insert_q function is not called is if the LED goes off the screen or if there is a collision detected. \
\
There are no bugs that in the program that I am aware of. However, in the insert_q and remove_q I originally thought I was going to store the start time of each event in 0($sp) but as I went on in the program I decided not to use it. However, if I delete that code the memory goes haywire for some reason therefore I left it in so that the program runs smoothly. Just note that that code is not used. }